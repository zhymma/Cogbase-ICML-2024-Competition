'You are a math expert and familar with Lean 3 formal language. Now please translate the following statement and solution of a math word problem into Lean 3 formal solution. Given a informal problem and its informal solution, analyze the mathematical problem and gain an in-depth understanding of the informal solution, then generate the corresponding formal solution in Lean 3. You should output the code in the ```lean xxx ``` tag. Please note that the informal solution and the formal solution need to be identical and the formal solution should be able to pass the Lean 3 compiler.\nHere are some examples you can refer to:\n# Problem:\nGiven a scatterplot of data points, we find that the points form a parabolic shape. We decide to model this data using a quadratic polynomial function. The function we come up with is f(x) = ax^2 + bx + c. After analyzing the data, we find that the values of a, b, and c are 1, -6, and 9 respectively.\n\nCan we factorize the polynomial function f(x) = x^2 - 6x + 9?\n# Solution:\nYes, the given polynomial function f(x) = x^2 - 6x + 9 can be factorized. It is a perfect square trinomial, which is a special type of trinomial that can always be factored into the square of a binomial. \n\nIn this case, the function can be factored as follows:\n\nStep 1: Identify a, b, and c in the polynomial ax^2 + bx + c. In this case, a=1, b=-6, and c=9. \n\nStep 2: Take the square root of a and c. In this case, the square root of 1 is 1, and the square root of 9 is 3.\n\nStep 3: Write down the factored form as (x - m)^2, where m is the square root of c. In this case, the factored form is (x - 3)^2.\n\nTherefore, the polynomial function f(x) = x^2 - 6x + 9 can be factorized as f(x) = (x - 3)^2.\n# Formal solution in Lean 3:\n```lean\nimport data.real.basic\n\n-- We first declare our variables\nvariables (x : ℝ)\n\n-- We then state our theorem, which is the factorization of the polynomial function\ntheorem factorization : (x - 3) ^ 2 = x ^ 2 - 6 * x + 9 :=\nbegin\n  -- This is a simple calculation, so we use the `ring` tactic to handle it\n  ring,\nend\n```\n---\n# Problem:\nSuppose the revenue of a company, R, is a function of the price of a product, p, and the number of units sold, q. The relationship is given by the following polynomial equation: \n\nR(p, q) = 10p^2q - 5pq^2 + 3p + 4q.\n\nThe company wants to know how much the revenue will change if the price is increased by a small amount (dp) and the quantity is also increased by a small amount (dq). What is the total differential of R?\n# Solution:\nTo find the total differential of R, we first need to take the partial derivatives of R with respect to p and q.\n\nThe partial derivative of R with respect to p is:\n\n∂R/∂p = 20pq - 5q^2 + 3.\n\nAnd the partial derivative of R with respect to q is:\n\n∂R/∂q = 10p^2 - 10pq + 4.\n\nThe total differential of R (dR) is then given by:\n\ndR = (∂R/∂p) dp + (∂R/∂q) dq.\n\nSubstituting the expressions for the partial derivatives, we get:\n\ndR = (20pq - 5q^2 + 3) dp + (10p^2 - 10pq + 4) dq.\n# Formal solution in Lean 3:\n```lean\nimport data.real.basic\n\nvariables (p q : real)\n\n-- Define the revenue function R(p, q)\ndef R : real × real → real :=\nλ x, 10*x.1^2*x.2 - 5*x.1*x.2^2 + 3*x.1 + 4*x.2\n\n-- Define the partial derivatives of R with respect to p and q\ndef DpR : real × real → real :=\nλ x, 20*x.1*x.2 - 5*x.2^2 + 3\n\ndef DqR : real × real → real :=\nλ x, 10*x.1^2 - 10*x.1*x.2 + 4\n\n-- Compute the total differential of R\ndef total_differential : real × real → real × real → real :=\nλ x dx, DpR x * dx.1 + DqR x * dx.2\n```\n---\n# Problem:\nJohn and Mary are saving money to buy a new video game. John has already saved $20 and is saving an additional $10 each week. Mary has already saved $40 and is saving an additional $5 each week. After how many weeks will John and Mary have saved the same amount of money?\n# Solution:\nWe can write a system of equations to represent the problem. Let\'s represent the number of weeks by x, the amount of money John has by J, and the amount of money Mary has by M. \n\nThe first equation would be J = 20 + 10x, because John already has $20 and is saving an additional $10 each week.\n\nThe second equation would be M = 40 + 5x, because Mary already has $40 and is saving an additional $5 each week.\n\nTo find out after how many weeks John and Mary will have saved the same amount of money, we set the two equations equal to each other and solve for x:\n\n20 + 10x = 40 + 5x\n\nThis simplifies to:\n\n5x = 20\n\nSo, x = 4. \n\nTherefore, John and Mary will have saved the same amount of money after 4 weeks.\n# Formal solution in Lean 3:\n```lean\nimport data.real.basic\n\n-- Let\'s declare the variables\nvariables (x : ℝ)\n\n-- Here are the equations for John and Mary\ndef J (x : ℝ) := 20 + 10*x\ndef M (x : ℝ) := 40 + 5*x\n\n-- Now we need to prove that they will have the same amount after 4 weeks\nexample : J 4 = M 4 :=\nbegin\n  unfold J,  -- this replaces J by its definition\n  unfold M,  -- this replaces M by its definition\n  norm_num,  -- this simplifies numerical calculations\nend\n```\n---\n# Problem:\nJohn is saving money to buy a new bicycle. He starts with $50 and plans to save $10 each week. Define the amount of money John has as \'y\' and the number of weeks as \'x\'. Represent this situation as a linear equation and draw its graph.\n# Solution:\nThe linear equation that represents this situation is y = 10x + 50. \nThe y-intercept is the amount of money John starts with, which is $50. This is where the line crosses the y-axis. The slope, or steepness of the line, is the amount of money John saves each week, which is $10. This means that for each week that passes (each step we move to the right on the x-axis), John\'s total savings increase by $10 (we move up on the y-axis). \n\nTo draw the line on the graph, we first mark the y-intercept at point (0,50). Then, from this point, we move right 1 unit (representing 1 week) and up 10 units (representing the $10 saved) to mark the second point (1,60). We continue this process and connect these points to draw the line.\n# Formal solution in Lean 3:\n```lean\n-- Import the required library for real numbers\nimport data.real.basic\n\n-- Define the variables\nvariables (x y : ℝ)\n\n-- Declare the linear equation\ndef savings (x : ℝ) : ℝ := 10*x + 50\n```\n---\n# Problem:\nIn a game, a player\'s position on the field is represented by a point in a coordinate plane. The player\'s original position is (2, 3). During the game, the player moves according to the transformation represented by the matrix [[1, 2], [3, 4]]. After the transformation, where is the player\'s new position?\n# Solution:\nTo find the player\'s new position, we need to multiply the transformation matrix by the player\'s original position. \n\nWe treat the player\'s original position (2, 3) as a column matrix or vector, so the multiplication looks like this:\n\n[[1, 2], [3, 4]] * [[2], [3]]\n\nThe result of this multiplication is a new matrix (or vector) that represents the player\'s new position. \n\nTo multiply two matrices, we take the dot product of each row of the first matrix with each column of the second matrix. For the first row and column, this looks like this:\n\n1*2 + 2*3 = 2 + 6 = 8\n\nFor the second row and column:\n\n3*2 + 4*3 = 6 + 12 = 18\n\nSo, the player\'s new position is the point (8, 18).\n# Formal solution in Lean 3:\n```lean\nimport data.matrix.basic\n\nopen matrix\n\ndef original_position := ![2, 3]\ndef transformation := ![![1, 2], ![3, 4]]\n\ndef new_position := mul_vec transformation original_position\n\n#eval new_position\n-- Output: ![8, 18]\n```\n---\n# Problem:\nJohn is setting up a lemonade stand. On the first day, he sold 7 cups of lemonade. Each day after that, he managed to sell 2 more cups than he did the previous day. \n\na) Write an equation to represent the number of cups of lemonade John sells each day. \n\nb) If John keeps up this pace, how many cups will he have sold on the 5th day?\n# Solution:\na) We can let "x" represent the number of days since John started selling lemonade, and "y" represent the number of cups he sold. On the first day (x = 1), John sold 7 cups of lemonade (y = 7). Each subsequent day, he sells 2 more cups than he did the previous day. So, we can represent this as a linear equation: y = 7 + 2(x - 1).\n\nb) To find out how many cups John sold on the 5th day, we substitute x = 5 into our equation. This gives us y = 7 + 2(5 - 1) = 7 + 2*4 = 7 + 8 = 15. So, on the 5th day, John will have sold 15 cups of lemonade.\n# Formal solution in Lean 3:\n```lean\n-- declare the variables\nvariables (x y : ℕ)\n\n-- declare the function (linear equation)\ndef f (x : ℕ) : ℕ := 7 + 2 * (x - 1)\n\n-- prove part a\nexample : ∀ (x : ℕ), x > 0 → f x = 7 + 2 * (x - 1) :=\nbegin\n  intros,\n  unfold f,\nend\n\n-- prove part b\nexample : f 5 = 15 :=\nbegin\n  unfold f,\n  simp,\n  apply nat.succ_eq_add_one,\nend\n```\n---\n# Problem:\nJimmy has a rectangular garden with a length of 8 meters and a width of 6 meters. He decided to increase the size of his garden by extending the length by 5 meters and the width by 3 meters. What is the increase in the area of Jimmy\'s garden?\n# Solution:\nFirst, we need to calculate the original area of the garden. The area of a rectangle is given by the formula `length * width`. So, the original area of the garden is `8 meters * 6 meters = 48 square meters`.\n\nThen, we calculate the new area of the garden after the extension. The new length is `8 meters + 5 meters = 13 meters` and the new width is `6 meters + 3 meters = 9 meters`. So, the new area of the garden is `13 meters * 9 meters = 117 square meters`.\n\nFinally, we find the increase in the area by subtracting the original area from the new area. So, the increase in the area of the garden is `117 square meters - 48 square meters = 69 square meters`.\n# Formal solution in Lean 3:\n```lean\nimport data.real.basic\n\n-- Defining the original length and width of the garden\ndef orig_length : ℝ := 8\ndef orig_width : ℝ := 6\n\n-- Defining the increase in length and width\ndef length_increase : ℝ := 5\ndef width_increase : ℝ := 3\n\n-- Calculating the original area\ndef orig_area : ℝ := orig_length * orig_width\n\n-- Calculating the new length and width\ndef new_length : ℝ := orig_length + length_increase\ndef new_width : ℝ := orig_width + width_increase\n\n-- Calculating the new area\ndef new_area : ℝ := new_length * new_width\n\n-- Calculating the increase in area\ndef area_increase : ℝ := new_area - orig_area\n\n-- Proving that the increase in area is 69 square meters\nexample : area_increase = 69 := begin\n  unfold area_increase,\n  unfold new_area,\n  unfold orig_area,\n  unfold new_length,\n  unfold new_width,\n  unfold orig_length,\n  unfold orig_width,\n  unfold length_increase,\n  unfold width_increase,\n  norm_num,\nend\n```\n---\n# Problem:\nIn his statistics class, John has scores of 85, 92, 78, and 88 on his first four tests. He wants to have at least an 88 average after his fifth test. What score does he need on his fifth test? Express your answer in terms of a complex number where the real part represents the score he needs if it\'s achievable, and the imaginary part represents the score he needs beyond the maximum score of 100.\n# Solution:\nFirst, we need to calculate the total score John has from his first four tests. This is 85 + 92 + 78 + 88 = 343. \n\nSecond, we need to calculate the total score John wants to have after five tests. As his target average is 88, he wants to have a total of 88 * 5 = 440. \n\nTo achieve his target, John needs to score 440 - 343 = 97 on his fifth test. \n\nHowever, the maximum score is 100. Therefore, the real part of the complex number is 100, and the imaginary part is 97 - 100 = -3. \n\nSo the score John needs is represented by the complex number 100 - 3i.\n# Formal solution in Lean 3:\n```lean\nimport data.complex.basic\n\n-- define the scores of the first four tests\ndef scores : list ℕ := [85, 92, 78, 88]\n\n-- calculate the total score of the first four tests\ndef total_score := list.sum scores\n\n-- define the target average\ndef target_avg : ℕ := 88\n\n-- calculate the total score John wants to have after five tests\ndef target_total := target_avg * 5\n\n-- calculate the score John needs on his fifth test\ndef required_score := target_total - total_score\n\n-- define the maximum score\ndef max_score : ℕ := 100 \n\n-- define the real part and the imaginary part of the complex number\n-- the real part is the minimum of the maximum score and the required score\n-- the imaginary part is the difference between the required score and the real part\ndef real_part := min max_score required_score\ndef imaginary_part := required_score - real_part\n\n-- the score John needs is represented by the complex number real_part - imaginary_part * I\n#eval (complex.mk real_part (-imaginary_part) : ℂ)\n```\n---\n# Problem:\nJohn and Mary are selling lemonade. One day, John sold 3 cups of lemonade for every 2 cups that Mary sold. Together, they sold 35 cups of lemonade. On the next day, John sold 2 cups of lemonade for each cup that Mary sold. Together, they sold 30 cups of lemonade. How many cups of lemonade did John and Mary each sell on each day?\n# Solution:\nWe can solve this problem using a system of equations. \n\nFor the first day, let\'s denote the number of cups of lemonade that John sold as 3x and the number of cups that Mary sold as 2x. According to the problem, they sold 35 cups together, so we can write the first equation as: \n3x + 2x = 35.\n\nFor the second day, let\'s denote the number of cups of lemonade that John sold as 2y and the number of cups that Mary sold as y. They sold 30 cups together, so the second equation is: \n2y + y = 30.\n\nSolving the first equation, we get x = 7. So, on the first day, John sold 3*7 = 21 cups of lemonade and Mary sold 2*7 = 14 cups of lemonade.\n\nSolving the second equation, we get y = 10. So, on the second day, John sold 2*10 = 20 cups of lemonade and Mary sold 10 cups of lemonade.\n\nSo, John and Mary sold 21 and 14 cups of lemonade on the first day, and 20 and 10 cups of lemonade on the second day, respectively.\n# Formal solution in Lean 3:\n```lean\nimport data.real.basic\n\nexample (x y : ℝ) : x + y = y + x :=\nbegin\n  exact add_comm x y,\nend\n```\n---\n# Problem:\nLet\'s consider a square ABCD of side length "a". A geometric transformation doubles the side length of the square to create a new square A\'B\'C\'D\'. Meanwhile, in terms of exponents, if we have two equal bases and their exponents are added together, we get the same result as multiplying the numbers with those exponents of the same base. \n\nGiven these premises:\n\n1. What is the area of the transformed square A\'B\'C\'D\'?\n2. If we have a^2 = Area of square ABCD, what would be the equivalent expression for the area of square A\'B\'C\'D\' in terms of "a"?\n# Solution:\n1. The side length of the transformed square A\'B\'C\'D\' is 2a (twice the original length). According to the formula for the area of a square (side length squared), the area of A\'B\'C\'D\' would be (2a)^2 = 4a^2.\n\n2. Given that a^2 = Area of square ABCD, since the area of the transformed square is 4 times the area of the original square, an equivalent expression for the area of square A\'B\'C\'D\' in terms of "a" would be 4 * a^2.\n# Formal solution in Lean 3:\n```lean\nimport data.real.basic\n\nvariables (a : ℝ)\n\n-- Theorem statement\ntheorem transformed_square_area : (2*a)^2 = 4*(a^2) :=\nbegin\n  -- Calculation\n  calc (2*a)^2 = 4*a^2 : by ring,\nend\n```\n---\n'